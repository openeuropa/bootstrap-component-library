// Configuration
@import "@openeuropa/bcl-bootstrap/scss/functions";
@import "@openeuropa/bcl-bootstrap/scss/variables";
@import "@openeuropa/bcl-bootstrap/scss/maps";
@import "@openeuropa/bcl-bootstrap/scss/mixins";

$colors-schemas: "" !default;

// scss-docs-start btn-variant-loops
@each $schema_name, $schema_array in $colors-schemas {
  .#{$schema_name} {
    $schema-array-rgb: map-loop($schema_array, to-rgb, "$value");

    @each $color, $value in $schema-array-rgb {
      --#{$prefix}#{$color}-rgb: #{$value};
    }
    // scss-docs-start btn-variant-loops
    @each $color, $value in $schema_array {
      --bs-#{$color}: #{$value};
      @if $color == "primary" {
        --bs-link-color: #{$value};
        --bs-link-hover-color: shift-color(#{$value}, $link-shade-percentage);
      }
      // Buttons
      .btn-#{$color} {
        @if $color == "light" {
          @include button-variant(
            $value,
            $value,
            $hover-background: shade-color($value, $btn-hover-bg-shade-amount),
            $hover-border: shade-color($value, $btn-hover-border-shade-amount),
            $active-background: shade-color($value, $btn-active-bg-shade-amount),
            $active-border: shade-color($value, $btn-active-border-shade-amount)
          );
        } @else if $color == "dark" {
          @include button-variant(
            $value,
            $value,
            $hover-background: tint-color($value, $btn-hover-bg-tint-amount),
            $hover-border: tint-color($value, $btn-hover-border-tint-amount),
            $active-background: tint-color($value, $btn-active-bg-tint-amount),
            $active-border: tint-color($value, $btn-active-border-tint-amount)
          );
        } @else {
          @include button-variant($value, $value);
        }
      }
      .btn-outline-#{$color} {
        @include button-outline-variant($value);
      }

      // Links
      .link-#{$color} {
        color: $value !important; // stylelint-disable-line declaration-no-important

        @if $link-shade-percentage != 0 {
          &:hover,
          &:focus {
            color: if(
              color-contrast($value) == $color-contrast-light,
              shade-color($value, $link-shade-percentage),
              tint-color($value, $link-shade-percentage)
            ) !important; // stylelint-disable-line declaration-no-important
          }
        }
      }

      // Alerts
      $alert-background: shift-color($value, $alert-bg-scale);
      $alert-border: shift-color($value, $alert-border-scale);
      $alert-color: shift-color($value, $alert-color-scale);

      @if (
        contrast-ratio($alert-background, $alert-color) < $min-contrast-ratio
      ) {
        $alert-color: mix(
          $value,
          color-contrast($alert-background),
          abs($alert-color-scale)
        );
      }
      .alert-#{$color} {
        @include alert-variant($alert-background, $alert-border, $alert-color);
      }

      // List group
      $lg-v-bg: shift-color($value, $list-group-item-bg-scale);
      $lg-v-color: shift-color($value, $list-group-item-color-scale);
      @if (contrast-ratio($lg-v-bg, $lg-v-color) < $min-contrast-ratio) {
        $lg-v-color: mix(
          $value,
          color-contrast($lg-v-bg),
          abs($list-group-item-color-scale)
        );
      }

      @include list-group-item-variant($color, $lg-v-bg, $lg-v-color);

      // Utilities
      $color-rgb: to-rgb($value);
      .text-bg-#{$color} {
        color: color-contrast($value)
          if($enable-important-utilities, !important, null);
        background-color: RGBA($color-rgb, var(--#{$prefix}bg-opacity, 1))
          if($enable-important-utilities, !important, null);
      }

      .bg-#{$color} {
        --bs-bg-opacity: 1;
        background-color: rgba(
          var(--bs-#{$color}-rgb),
          var(--bs-bg-opacity)
        ) !important;
      }

      // Components

      @if $color == "primary" {
        // Header
        .bcl-header__navbar {
          background: $value;
        }
      }
    }
  }
}
